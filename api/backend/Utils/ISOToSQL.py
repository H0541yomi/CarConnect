from dateutil.parser import *
from dateutil.tz import *
from datetime import *

def date_to_formatted_date(date):
    parsed_date = parse_date(date)
    if not parsed_date:
        return None
    return parsed_date.strftime("%Y-%m-%d")

def date_to_formatted_datetime(date):
    parsed_date = parse_date(date)
    if not parsed_date:
        return None
    return parsed_date.strftime("%Y-%m-%d %H:%M:%S")

def parse_date(date):
    try:
        # Timezone offsets generated by ChatGPT
        tzinfos = {
            # North America
            "EST": tzoffset("EST", -5*3600),
            "EDT": tzoffset("EDT", -4*3600),
            "CST": tzoffset("CST", -6*3600),
            "CDT": tzoffset("CDT", -5*3600),
            "MST": tzoffset("MST", -7*3600),
            "MDT": tzoffset("MDT", -6*3600),
            "PST": tzoffset("PST", -8*3600),
            "PDT": tzoffset("PDT", -7*3600),
            
            # South America
            "BRT": tzoffset("BRT", -3*3600),
            "BRST": tzoffset("BRST", -2*3600),
            "ART": tzoffset("ART", -3*3600),
            
            # Europe
            "GMT": tzoffset("GMT", 0),
            "BST": tzoffset("BST", 1*3600),   # British Summer Time
            "CET": tzoffset("CET", 1*3600),
            "CEST": tzoffset("CEST", 2*3600),
            "EET": tzoffset("EET", 2*3600),
            "EEST": tzoffset("EEST", 3*3600),
            
            # Asia
            "JST": tzoffset("JST", 9*3600),
            "KST": tzoffset("KST", 9*3600),
            "CST": tzoffset("CST", 8*3600),  # China Standard Time
            "IST": tzoffset("IST", 5*3600 + 1800),  # India Standard Time
            
            # Oceania
            "AEST": tzoffset("AEST", 10*3600),
            "AEDT": tzoffset("AEDT", 11*3600),
            "ACST": tzoffset("ACST", 9*3600 + 1800),
            "ACDT": tzoffset("ACDT", 10*3600 + 1800),
            "AWST": tzoffset("AWST", 8*3600),
        }

        parsed_date = parse(date, tzinfos=tzinfos)
        if parsed_date.tzinfo:
            parsed_date = parsed_date.astimezone(tzutc())

        return parsed_date

    except Exception as e:
        print(f"Error parsing date: {e}")
        return None